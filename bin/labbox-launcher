#!/usr/bin/env python

import os
import argparse
import labbox_launcher as ll

def main():
    parser = argparse.ArgumentParser(description='Launch a labbox container')
    parser.add_argument('--port', help="Listen port (on the host)", required=True)
    parser.add_argument('--tmp', help="Optional host directory to mount as /tmp in the container", required=False)
    parser.add_argument('--data', help="Optional host directory to mount as /data in the container", required=False)
    parser.add_argument('COMMAND', help='Options: run')
    parser.add_argument('IMAGE', help='Docker image')

    args = parser.parse_args()

    command = args.COMMAND

    if command == 'run':
        _run_labbox_container(args)
        return
    else:
        raise Exception(f'Unexpected command: {command}')

def _run_labbox_container(args):
    inject_user_dir = ll._docker_dir() + '/injectUser'

    KACHERY_STORAGE_DIR = os.getenv('KACHERY_STORAGE_DIR')
    if KACHERY_STORAGE_DIR is None:
        raise Exception('KACHERY_STORAGE_DIR environment variable not set.')

    NEW_IMAGE = _append_docker_image_name(args.IMAGE, '-nonroot')

    volume_mounts = []
    volume_mounts.append(dict(
        host_dir=KACHERY_STORAGE_DIR,
        container_dir=KACHERY_STORAGE_DIR
    ))
    if args.tmp:
        assert os.path.exists(args.tmp), f'No such directory: {args.tmp}'
        volume_mounts.append(dict(
            host_dir=args.tmp,
            container_dir='/tmp'
        ))
    if args.data:
        assert os.path.exists(args.data), f'No such directory: {args.data}'
        volume_mounts.append(dict(
            host_dir=args.data,
            container_dir='/data'
        ))
    volume_opts = ' '.join([
        f'-v {x["host_dir"]}:{x["container_dir"]}'
        for x in volume_mounts
    ])

    ss = ll.ShellScript(f"""
        #!/bin/bash

        set -ex

        USER_ID="$(id -u)"
        GROUP_ID="$(id -g)"
        USER_INSIDE_CONTAINER="labbox"
        BASE_IMAGE="{args.IMAGE}" # docker image name
        NEW_IMAGE="{NEW_IMAGE}"
        INJECT_USER_DIR="{inject_user_dir}"
        docker build \\
            -f $INJECT_USER_DIR/injectUser.Dockerfile \\
            -t $NEW_IMAGE \\
            --build-arg BASE_IMAGE=$BASE_IMAGE \\
            --build-arg NEW_USER=$USER_INSIDE_CONTAINER \\
            --build-arg NEW_UID=$USER_ID \\
            --build-arg NEW_GID=$GROUP_ID \\
            $INJECT_USER_DIR
        
        docker run \\
            -p {args.port}:8080 \\
            {volume_opts} \\
            -e KACHERY_STORAGE_DIR="{KACHERY_STORAGE_DIR}" \\
            -it $NEW_IMAGE
    """, verbose=True)

    ss.start()
    ss.wait()

def _append_docker_image_name(x, y):
    a = x.split(':')
    if len(a) == 1:
        return x + y
    elif len(a) == 2:
        return a[0] + y + ':' + a[1]
    else:
        raise Exception(f'Invalid docker image name: {x}')

if __name__ == "__main__":
    main()
